if getgenv().SkeleHubExecuted then return end
getgenv().SkeleHubExecuted = true

-- SERVICES
local HttpService = game:GetService('HttpService')
local UIS = game:GetService('UserInputService')
local RunS = game:GetService('RunService')
local RS = game:GetService('ReplicatedStorage')
local TS = game:GetService('TweenService')
local PS = game:GetService('PhysicsService')

local player = game.Players.LocalPlayer
local mouse = player:GetMouse()

local DifferentColorsPoints = {Color3.fromRGB(1, 81, 255), Color3.fromRGB(255,0,0), Color3.fromRGB(0,255,0), Color3.fromRGB(255,255,0), Color3.fromRGB(255,0,255), Color3.fromRGB(0,255,255)}
MacroUnitsTextBlocks = {}
local RecordingMacro = false
local FPS = 0
local StartTime = os.time()
local GameFinished

local notify = loadstring(game:HttpGet("https://raw.githubusercontent.com/menshaha/Main/main/Notify"))()

local function createNotify(text, timee)
	notify.New(text, timee)
end

makefolder("Skele Hub")
makefolder("Skele Hub\\Anime Vanguards")
makefolder("Skele Hub\\Anime Vanguards\\Macro")

local executor = identifyexecutor()

local DefaultFiles = {

	['Skele Hub\\Anime Vanguards\\Settings_' .. player.Name] = {

		['FPS_LIMIT'] = 60;
		['Selected Macro'] = '';
		['Step Delay'] = 1;
		['Hide Key'] = 'U';

		['Selected Macro Map'] = {Tower = {}, Main = {}, Raid = {}, Portal = {}, Other = {}}

	};




}

local macroMapList = {

	['Main'] = {
		'Planet Namak',
		'Hidden Sand Village',
		'Snowy Town',
	};

	['Tower'] = {

	};

	['Raid'] = {

	};

	['Portal'] = {
		'Double Dungeon',
	};

	['Other'] = {
	}
}

RunS.RenderStepped:Connect(function()
	FPS += 1
end)

function deepcopy(orig)
	local orig_type = type(orig)
	local copy
	if orig_type == 'table' then
		copy = {}
		for orig_key, orig_value in next, orig, nil do
			copy[deepcopy(orig_key)] = deepcopy(orig_value)
		end
		setmetatable(copy, deepcopy(getmetatable(orig)))
	else -- number, string, boolean, etc
		copy = orig
	end
	return copy
end

for name, value in pairs(DefaultFiles) do -- SET DEFAULT VALUES
	if not pcall(function() readfile(name) end) then writefile(name, HttpService:JSONEncode(value)) end 
end

local Settings = HttpService:JSONDecode(readfile('Skele Hub\\Anime Vanguards\\Settings_' .. player.Name)) 

local function Save (valueName, newValue)
	Settings[valueName] = newValue
	writefile('Skele Hub\\Anime Vanguards\\Settings_' .. player.Name, HttpService:JSONEncode(Settings))
end

local function GetSave (valueName)
	local value = Settings[valueName]
	if value == nil then
		if DefaultFiles['Skele Hub\\Anime Vanguards\\Settings_' .. player.Name][valueName] ~= nil then
			Save(valueName, DefaultFiles['Skele Hub\\Anime Vanguards\\Settings_' .. player.Name][valueName])
		else
			Save(valueName, false)
		end

		value = Settings[valueName]
	end

	if type(value) == 'table' then value = deepcopy(value) end

	return value
end

function StringToCFrame(String)
	local Split = string.split(String, ",")
	return CFrame.new(Split[1],Split[2],Split[3],Split[4],Split[5],Split[6],Split[7],Split[8],Split[9],Split[10],Split[11],Split[12])
end

local function TPLobby ()
	game:GetService('TeleportService'):Teleport(16146832113, player)
end

function makeComma(p1)
	local value = p1;
	while true do
		local value2, value3 = string.gsub(value, "^(-?%d+)(%d%d%d)", "%1,%2");
		value = value2;
		if value3 ~= 0 then else
			break;
		end;
	end;
	return value;
end

local function math_round( roundIn , roundDig )
	local mul = math.pow( 10, roundDig )
	return ( math.floor( ( roundIn * mul ) + 0.5 )/mul )
end

local vu = game:GetService("VirtualUser")
player.Idled:connect(function()
	vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	wait(1)
	vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)

local function MakeUICorner (scale, newParent)

	local newCorner = Instance.new('UICorner')
	newCorner.CornerRadius = UDim.new(scale, 0)
	newCorner.Parent = newParent

end

local function makeUiStroke(scale, color, newParent)
    local newUiStroke = Instance.new('UIStroke', newParent)
    newUiStroke.Color = color
    newUiStroke.Thickness = scale
end
local function MakeUIPadding (bottom, left, right, top, newParent)

	local newPadding = Instance.new('UIPadding')
	newPadding.PaddingBottom = UDim.new(bottom, 0)
	newPadding.PaddingLeft = UDim.new(left, 0)
	newPadding.PaddingRight = UDim.new(right, 0)
	newPadding.PaddingTop = UDim.new(top, 0)
	newPadding.Parent = newParent

end

local function makeUIList (padding, newParent, VA)
	local va = VA or Enum.VerticalAlignment.Top

	local newUIList = Instance.new('UIListLayout')
	newUIList.Padding = UDim.new(padding, 0)
	newUIList.FillDirection = Enum.FillDirection.Vertical
	newUIList.HorizontalAlignment = Enum.HorizontalAlignment.Center
	newUIList.VerticalAlignment = va
	newUIList.SortOrder = Enum.SortOrder.LayoutOrder
	newUIList.Parent = newParent

end

---------------------------------------------------------

PGUI = game.Players.LocalPlayer:WaitForChild('PlayerGui')

-- MAKING GUI
ScreenGui = Instance.new('ScreenGui', game.CoreGui)
ScreenGui.DisplayOrder = 999
ScreenGui.Name = 'Skele Hub'
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
ScreenGui.Enabled = true


MainFrame = Instance.new('Frame', ScreenGui)
MainFrame.BackgroundTransparency = 1
MainFrame.SizeConstraint = Enum.SizeConstraint.RelativeYY
MainFrame.Size = UDim2.new(0.525, 0, 0.525, 0)
MainFrame.Position = UDim2.new(0.614, 0, 0.284, 0)
MainFrame.Name = 'MainFrame'

MainContent = Instance.new('Frame', MainFrame)
MainContent.BackgroundColor3 = Color3.fromRGB(73, 73, 99)
MainContent.BackgroundTransparency = 1
MainContent.Size = UDim2.new(1, 0, 1, 0)
MakeUICorner(0.01, MainContent)

lowerTop = Instance.new('Frame', MainContent)
lowerTop.AnchorPoint = Vector2.new(0.5, 1)
lowerTop.BackgroundColor3 = Color3.fromRGB(26, 26, 26)
lowerTop.BackgroundTransparency = 1
lowerTop.Size = UDim2.new(1, 0, 0.019, 0)
lowerTop.Position = UDim2.new(0.5, 0, 0.038, 0)	
lowerTop.BorderSizePixel = 0

ShadowMainContent = Instance.new('Frame', MainContent)
ShadowMainContent.BackgroundColor3 = Color3.fromRGB(102, 102, 153)
ShadowMainContent.Transparency = 0.2
ShadowMainContent.AnchorPoint = Vector2.new(0.5, 0.5)
ShadowMainContent.Size = UDim2.new(1.02, 0, 1.02, 0)
ShadowMainContent.Position = UDim2.new(0.5, 0, 0.5, 0)
ShadowMainContent.ZIndex = -1
MakeUICorner(0.015, ShadowMainContent)

additionalFrame = Instance.new('Frame', ScreenGui) additionalFrame.Name = 'Additional'
additionalFrame.BackgroundColor3 = Color3.fromRGB(176, 176, 239) 
additionalFrame.BackgroundTransparency = 0.5
additionalFrame.Position = UDim2.new(0.15, 0, 0.005, 0)
additionalFrame.SizeConstraint = Enum.SizeConstraint.RelativeYY
additionalFrame.Size = UDim2.new(0.195, 0, 0.062, 0)
additionalFrame.ZIndex = 1000001
MakeUICorner(0.07, additionalFrame)

additionalFrameShadow = Instance.new('Frame', additionalFrame)
additionalFrameShadow.BackgroundColor3 = Color3.fromRGB(102, 102, 153)
additionalFrameShadow.BackgroundTransparency = 0.2
additionalFrameShadow.AnchorPoint = Vector2.new(0.5, 0.5)
additionalFrameShadow.Size = UDim2.new(1.05, 0, 1.1, 0)
additionalFrameShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
additionalFrameShadow.ZIndex = 1000000
MakeUICorner(0.07, additionalFrameShadow)
makeUiStroke(1, Color3.fromRGB(255, 230, 255), additionalFrameShadow)

additionalFrameInner = Instance.new('Frame', additionalFrame)
additionalFrameInner.BackgroundTransparency = 1
additionalFrameInner.Size = UDim2.new(1,0,1,0)
makeUIList(0.02, additionalFrameInner, Enum.VerticalAlignment.Center)

TimerLabel = Instance.new('TextLabel', additionalFrameInner)
TimerLabel.BackgroundTransparency = 1
TimerLabel.Size = UDim2.new(0.95, 0, 0.3, 0)
TimerLabel.ZIndex = 1000002
TimerLabel.Font = Enum.Font.GothamBlack
TimerLabel.TextColor3 = Color3.fromRGB(255,255,255)
TimerLabel.TextScaled = true
TimerLabel.TextXAlignment = Enum.TextXAlignment.Left
TimerLabel.Text = "Timer: 00:00:00"

FPSLabel = Instance.new('TextLabel', additionalFrameInner)
FPSLabel.BackgroundTransparency = 1
FPSLabel.Size = UDim2.new(0.95, 0, 0.3, 0)
FPSLabel.ZIndex = 1000002
FPSLabel.Font = Enum.Font.GothamBlack
FPSLabel.TextColor3 = Color3.fromRGB(255,255,255)
FPSLabel.TextScaled = true
FPSLabel.TextXAlignment = Enum.TextXAlignment.Left
FPSLabel.Text = "FPS: 0"

DiscordLabel = Instance.new('TextLabel', additionalFrameInner)
DiscordLabel.BackgroundTransparency = 1
DiscordLabel.Size = UDim2.new(0.95, 0, 0.3, 0)
DiscordLabel.ZIndex = 1000002
DiscordLabel.Font = Enum.Font.GothamBlack
DiscordLabel.TextColor3 = Color3.fromRGB(255,255,255)
DiscordLabel.TextScaled = true
DiscordLabel.TextXAlignment = Enum.TextXAlignment.Left
DiscordLabel.Text = "Discord: CVX9a8GgTK"

Top = Instance.new('Frame', MainFrame)
Top.BackgroundColor3 = Color3.fromRGB(26, 26, 26)
Top.BackgroundTransparency = 1
Top.AnchorPoint = Vector2.new(1, 0.5)
Top.Size = UDim2.new(1, 0, 0.048, 0)
Top.Position = UDim2.new(1, 0, 0.014, 0)
Top.ZIndex = 10000
MakeUICorner(0.2, Top)

CloseButton = Instance.new('TextButton', Top)
CloseButton.AnchorPoint = Vector2.new(1, 0.5)
CloseButton.BackgroundColor3 = Color3.fromRGB(170, 170, 255)
CloseButton.Size = UDim2.new(0.065, 0, 0.694, 0)
CloseButton.Position = UDim2.new(0.984, 0, 0.5, 0)
CloseButton.ZIndex = 10001
CloseButton.Font = Enum.Font.GothamBlack
CloseButton.TextColor3 = Color3.fromRGB(255,255,255)
CloseButton.TextScaled = true
CloseButton.Text = '-'
MakeUICorner(0.3, CloseButton)


HubTitle = Instance.new('TextLabel', Top)
HubTitle.BackgroundTransparency = 1
HubTitle.BackgroundColor3 = Color3.fromRGB(102, 102, 153)
HubTitle.AnchorPoint = Vector2.new(0.5, 0.5)
HubTitle.Size = UDim2.new(0.85, 0, 0.8, 0)
HubTitle.Position = UDim2.new(0.5, 0, 0.5, 0)
HubTitle.ZIndex = 2000
HubTitle.Font = Enum.Font.GothamBlack
HubTitle.TextColor3 = Color3.fromRGB(255,255,255)
HubTitle.TextScaled = true
HubTitle.Text = 'SKELE HUB [BETA]'
HubTitle.BorderSizePixel = 0
MakeUICorner(0.3, HubTitle)

task.spawn(function()
	while true do
		TimerLabel.Text = string.format("Timer: %02s:%02s:%02s", math.floor((os.time() - StartTime) / 3600), math.floor((os.time() - StartTime)%3600/60), (os.time() - StartTime) % 60 )
		FPSLabel.Text = string.format("FPS: %s", FPS) FPS = 0
		task.wait(1)
	end
end)


TopBarSizes = {
	[false] = UDim2.new(0.5, 0,0.048, 0),
	[true] = UDim2.new(1,0,0.048,0)
}
closeButtonSizes = {
	[false] = UDim2.new(0.13, 0, 0.694, 0),
	[true] = UDim2.new(0.065, 0, 0.694, 0)
}

HubTitlePoses = {
	[false] = UDim2.new(0.45, 0, 0.5, 0),
	[true] = UDim2.new(0.5, 0, 0.5, 0)
}


local UIClosed = false
CloseButton.MouseButton1Click:Connect(function()
	MainContent.Visible = not MainContent.Visible
	if UIClosed then
		UIClosed = false
		HubTitle.BackgroundTransparency = 1
		TS:Create(ShadowMainContent, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { BackgroundTransparency = 0.2 }):Play()
	else
		UIClosed = true
		HubTitle.BackgroundTransparency = 0.2
		TS:Create(ShadowMainContent, TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { BackgroundTransparency = 1 }):Play()
	end

	TS:Create(HubTitle, TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { Position = HubTitlePoses[MainContent.Visible] }):Play()
	TS:Create(CloseButton, TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { Size = closeButtonSizes[MainContent.Visible] }):Play()
	TS:Create(Top, TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { Size = TopBarSizes[MainContent.Visible] }):Play()
	wait(0.4)
end)

if GetSave('Auto Hide UI on Execute') then
	MainContent.Visible = false
	UIClosed = true
	HubTitle.BackgroundTransparency = 0.2
	TS:Create(ShadowMainContent, TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { BackgroundTransparency = 1 }):Play()

	TS:Create(HubTitle, TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { Position = HubTitlePoses[MainContent.Visible] }):Play()
	TS:Create(CloseButton, TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { Size = closeButtonSizes[MainContent.Visible] }):Play()
	TS:Create(Top, TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { Size = TopBarSizes[MainContent.Visible] }):Play()
	wait(0.4)
end


local function MakeDraggable (dragGui, dragwith)

	local dragging
	local dragInput
	local dragStart
	local startPos
	local function updateDrag(input)
		local delta = input.Position - dragStart
		local dragTime = 0.04
		local SmoothDrag = {}
		SmoothDrag.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		local dragSmoothFunction = TS:Create(dragwith, TweenInfo.new(dragTime, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), SmoothDrag)
		dragSmoothFunction:Play()
	end

	dragGui.InputBegan:Connect(function(input)
		local usedMouse = input.UserInputType == Enum.UserInputType.MouseButton1
		local usedTouch = input.UserInputType == Enum.UserInputType.Touch

		if usedMouse or usedTouch then
			dragging = true
			dragStart = input.Position
			startPos = dragwith.Position
			local release

			release = UIS.InputEnded:Connect(function(input)
				if input.UserInputType ~= Enum.UserInputType.MouseButton1 and input.UserInputType ~= Enum.UserInputType.Touch then return end
				dragging = false
				release:Disconnect()

			end)



		end
	end)
	dragGui.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)
	UIS.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			updateDrag(input)
		end
	end)

end
MakeDraggable(additionalFrame, additionalFrame)
MakeDraggable(Top, MainFrame)

Pages = Instance.new('ScrollingFrame', MainContent)
Pages.BackgroundColor3 = Color3.fromRGB(94, 94, 127)
Pages.Size = UDim2.new(1, 0, 0.047, 0)
Pages.Position = UDim2.new(0, 0, 0.038, 0)
Pages.AutomaticCanvasSize = 'Y'
Pages.CanvasSize = UDim2.new(0, 0, 0, 0)
Pages.ScrollBarThickness = 0
Pages.ScrollingDirection = Enum.ScrollingDirection.X
Pages.BorderSizePixel = 0
Pages.ZIndex = 9500
makeUiStroke(1, Color3.fromRGB(170, 170, 255), Pages)

ListPages = Instance.new('UIListLayout', Pages)
ListPages.FillDirection = Enum.FillDirection.Horizontal
ListPages.HorizontalAlignment = Enum.HorizontalAlignment.Left
ListPages.VerticalAlignment = Enum.VerticalAlignment.Center
ListPages.SortOrder = Enum.SortOrder.LayoutOrder

ScrollingContent = Instance.new('ScrollingFrame', MainContent)
ScrollingContent.BackgroundTransparency = 1
ScrollingContent.Size = UDim2.new(1, 0, 0.916, 0)
ScrollingContent.Position = UDim2.new(0, 0, 0.084, 0)
ScrollingContent.AutomaticCanvasSize = 'Y'
ScrollingContent.CanvasSize = UDim2.new(0, 0, 0, 0)
ScrollingContent.ScrollBarThickness = 4
ScrollingContent.ScrollingDirection = Enum.ScrollingDirection.Y
ScrollingContent.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
ScrollingContent.BorderSizePixel = 0
local uiPadding = Instance.new('UIPadding', ScrollingContent)
uiPadding.PaddingTop = UDim.new(0.01,0)

newPageButtonBCInfo = TweenInfo.new(0.15, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, 0, false)

pageOrder = 1
pageShown = nil
local function MakeNewPage (pageName, pageButtonX)

	local newPageButton = Instance.new('TextButton', Pages)
	newPageButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	newPageButton.Name = pageName
	newPageButton.BackgroundTransparency = 1
	newPageButton.Size = UDim2.new(pageButtonX, 0, 1, 0)
	newPageButton.Text = ''
	newPageButton.LayoutOrder = pageOrder pageOrder+=1
	newPageButton.BorderSizePixel = 0
	newPageButton.ZIndex = 9850

	local newPageButtonTitle = Instance.new('TextLabel', newPageButton)
	newPageButtonTitle.AnchorPoint = Vector2.new(0.5, 0.5)
	newPageButtonTitle.BackgroundTransparency = 1
	newPageButtonTitle.Size = UDim2.new(1, 0, 0.8, 0)
	newPageButtonTitle.Position = UDim2.new(0.5, 0, 0.5, 0)
	newPageButtonTitle.Font = Enum.Font.GothamBlack
	newPageButtonTitle.TextScaled = true
	newPageButtonTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
	newPageButtonTitle.Text = string.upper(pageName)
	newPageButtonTitle.ZIndex = 9875

	local newPageButtonBottomLine = Instance.new('Frame', newPageButton)
	newPageButtonBottomLine.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	newPageButtonBottomLine.Name = 'BottomLine'
	newPageButtonBottomLine.AnchorPoint = Vector2.new(0, 1)
	newPageButtonBottomLine.Size = UDim2.new(1, 0, 0.05, 0)
	newPageButtonBottomLine.Position = UDim2.new(0, 0, 1, 0)
	newPageButtonBottomLine.Visible = false
	newPageButtonBottomLine.BorderSizePixel = 0
	newPageButtonBottomLine.ZIndex = 9800

	local newPage = Instance.new('Frame', ScrollingContent)
	newPage.Name = pageName
	newPage.BackgroundTransparency = 1
	newPage.Size = UDim2.new(1, 0, 1, 0)
	newPage.Visible = false

	local LeftPage = Instance.new('Frame', newPage)
	LeftPage.Name = 'Left'
	LeftPage.BackgroundTransparency = 1
	LeftPage.Size = UDim2.new(0.5, 0, 1, 0)
	makeUIList(0.02, LeftPage)
	MakeUIPadding(0.01, 0, 0, 0.01, LeftPage)

	local RightPage = Instance.new('Frame', newPage)
	RightPage.Name = 'Right'
	RightPage.BackgroundTransparency = 1
	RightPage.AnchorPoint = Vector2.new(1, 0)
	RightPage.Position = UDim2.new(1, 0, 0, 0)
	RightPage.Size = UDim2.new(0.5, 0, 1, 0)
	makeUIList(0.02, RightPage)
	MakeUIPadding(0.01, 0, 0.033, 0.01, RightPage)

	local PlaceHolder = Instance.new('Frame', RightPage)
	PlaceHolder.BackgroundTransparency = 1
	PlaceHolder.Size = UDim2.new(0, 0, 0.4, 0)
	PlaceHolder.LayoutOrder = 999999

	local PlaceHolder = Instance.new('Frame', LeftPage)
	PlaceHolder.BackgroundTransparency = 1
	PlaceHolder.Size = UDim2.new(0, 0, 0.4, 0)
	PlaceHolder.LayoutOrder = 999999

	newPageButton.MouseEnter:Connect(function()
		local TweenButton = TS:Create(newPageButton, newPageButtonBCInfo, {BackgroundTransparency = 0.9})
		TweenButton:Play()
	end)

	newPageButton.MouseLeave:Connect(function()
		local TweenButton = TS:Create(newPageButton, newPageButtonBCInfo, {BackgroundTransparency = 1})
		TweenButton:Play()
	end)

	newPageButton.MouseButton1Click:Connect(function()
		if pageShown == newPage then return end
		pageShown.Visible = false
		Pages[pageShown.Name].BottomLine.Visible = false

		pageShown = newPage
		newPageButtonBottomLine.Visible = true
		newPage.Visible = true


	end)

	return newPage
end

local Orders = {}
local function MakeNewSubPage (pageName, side, scaleY, cornerScale, UIPaddingTop, UIListLayout)

	local page = ScrollingContent[pageName][side]

	local newSubPage = Instance.new('Frame', page)
	newSubPage.BackgroundColor3 = Color3.fromRGB(48, 48, 69)
    newSubPage.BackgroundTransparency = 1
	newSubPage.BorderSizePixel = 0
	newSubPage.Size = UDim2.new(0.95, 0, scaleY, 0)
	MakeUICorner(cornerScale, newSubPage)
	makeUIList(UIListLayout, newSubPage)
	MakeUIPadding(0, 0.03, 0.03, UIPaddingTop, newSubPage)
    makeUiStroke(1, Color3.fromRGB(255, 229, 255), newSubPage)

	Orders[newSubPage] = 1
	return newSubPage
end

local function MakeTitle (subPage, TitleTXT, scaleY)

	local newTitle = Instance.new('TextLabel')
	newTitle.BackgroundTransparency = 1
	newTitle.Size = UDim2.new(1, 0, scaleY, 0)
	newTitle.Font = Enum.Font.GothamBlack
	newTitle.Text = TitleTXT
	newTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
	newTitle.TextScaled = true
	newTitle.LayoutOrder = Orders[subPage]
	newTitle.Parent = subPage

	Orders[subPage] += 1

	return newTitle
end

local checkBoxColors = {
	[true] = Color3.fromRGB(175, 175, 255);
	[false] = Color3.fromRGB(37, 37, 54)
}

local function MakeCheckbox (subPage, checkBoxTXT, scaleY)

	local newCheckBoxFrame = Instance.new('Frame', subPage)
	newCheckBoxFrame.BackgroundTransparency = 1
	newCheckBoxFrame.Size = UDim2.new(1, 0, scaleY, 0)
	newCheckBoxFrame.LayoutOrder = Orders[subPage]
	Orders[subPage] += 1

	local newCheckBox = Instance.new('Frame', newCheckBoxFrame)
	newCheckBox.AnchorPoint = Vector2.new(0, 0.5)
	newCheckBox.BackgroundColor3 = Color3.fromRGB(37, 37, 54)
	newCheckBox.Size = UDim2.new(0.049, 0, 0.73, 0)
	newCheckBox.Position = UDim2.new(0, 0, 0.5, 0)
	newCheckBox.BorderSizePixel = 0

	newCheckBox.BackgroundColor3 = checkBoxColors[GetSave(checkBoxTXT)]

	local UIStroke = Instance.new('UIStroke', newCheckBox)
	UIStroke.Color = Color3.fromRGB(255, 255, 255)
	UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Contextual
	UIStroke.LineJoinMode = Enum.LineJoinMode.Round
	UIStroke.Thickness = 1

	local newCheckBoxButton = Instance.new('TextButton', newCheckBox)
	newCheckBoxButton.Name = checkBoxTXT
	newCheckBoxButton.BackgroundTransparency = 1
	newCheckBoxButton.Size = UDim2.new(1,0,1,0)
	newCheckBoxButton.ZIndex = 10
	newCheckBoxButton.Text = ''

	local newCheckBoxTXT = Instance.new('TextLabel', newCheckBoxFrame)
	newCheckBoxTXT.BackgroundTransparency = 1
	newCheckBoxTXT.Size = UDim2.new(0.835, 0, 1, 0)
	newCheckBoxTXT.Position = UDim2.new(0.08, 0, 0, 0)
	newCheckBoxTXT.Font = Enum.Font.GothamBold
	newCheckBoxTXT.TextColor3 = Color3.fromRGB(255, 255, 255)
	newCheckBoxTXT.TextScaled = true
	newCheckBoxTXT.TextXAlignment = Enum.TextXAlignment.Left
	newCheckBoxTXT.Text = checkBoxTXT

	return newCheckBoxButton
end

local function MakeLargeButton (subPage, buttonTXT, scaleY)

	local newLargeButtonFrame = Instance.new('Frame', subPage)
	newLargeButtonFrame.BackgroundTransparency = 1
	newLargeButtonFrame.Size = UDim2.new(1, 0, scaleY, 0)
	newLargeButtonFrame.LayoutOrder = Orders[subPage]
	Orders[subPage] += 1

	local newLargeButton = Instance.new('TextButton', newLargeButtonFrame)
	newLargeButton.AnchorPoint = Vector2.new(0.5, 0.5)
	newLargeButton.BackgroundColor3 = Color3.fromRGB(75, 75, 108)
	newLargeButton.BorderSizePixel = 0
	newLargeButton.Size = UDim2.new(1, 0, 0.67, 0)
	newLargeButton.Position = UDim2.new(0.5, 0, 0.5, 0)
	newLargeButton.Text = ''
	newLargeButton.BorderSizePixel = 0


	local newLargeButtonLabel = Instance.new('TextLabel', newLargeButton)
	newLargeButtonLabel.AnchorPoint = Vector2.new(0.5, 0.5)
	newLargeButtonLabel.BackgroundTransparency = 1
	newLargeButtonLabel.Size = UDim2.new(1, 0, 0.8, 0)
	newLargeButtonLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
	newLargeButtonLabel.Font = Enum.Font.GothamBlack
	newLargeButtonLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	newLargeButtonLabel.TextScaled = true
	newLargeButtonLabel.Text = buttonTXT
	MakeUICorner(0.15, newLargeButton)

	local UIStroke = Instance.new('UIStroke', newLargeButton)
	UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	UIStroke.Color = Color3.fromRGB(189, 189, 255)
	UIStroke.LineJoinMode = Enum.LineJoinMode.Round
	UIStroke.Thickness = 1


	return newLargeButton
end

local function MakeDDL (subPage, DDLTXT, scaleY)

	local newDDLFrame = Instance.new('Frame', subPage)
	newDDLFrame.BackgroundTransparency = 1
	newDDLFrame.Size = UDim2.new(1, 0, scaleY, 0)
	newDDLFrame.LayoutOrder = Orders[subPage]
	Orders[subPage] += 1

	local newDDLLabel = Instance.new('TextLabel', newDDLFrame)
	newDDLLabel.BackgroundTransparency = 1
	newDDLLabel.Size = UDim2.new(1, 0, 0.3, 0)
	newDDLLabel.Position = UDim2.new(0, 0, 0.05, 0)
	newDDLLabel.Font = Enum.Font.GothamBlack
	newDDLLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	newDDLLabel.TextScaled = true
	newDDLLabel.TextXAlignment = Enum.TextXAlignment.Left
	newDDLLabel.Text = DDLTXT

	local newDDLButton = Instance.new('TextButton', newDDLFrame)
	newDDLButton.BackgroundColor3 = Color3.fromRGB(75, 75, 108)
	newDDLButton.BorderSizePixel = 0
	newDDLButton.Size = UDim2.new(1, 0, 0.408, 0)
	newDDLButton.Position = UDim2.new(0, 0, 0.45, 0)
	newDDLButton.Text = ''
	MakeUICorner(0.15, newDDLButton)

	local UIStroke = Instance.new('UIStroke', newDDLButton)
	UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	UIStroke.Color = Color3.fromRGB(189, 189, 255)
	UIStroke.LineJoinMode = Enum.LineJoinMode.Round
	UIStroke.Thickness = 1

	local newDDLList = Instance.new('TextLabel', newDDLButton)
	newDDLList.BackgroundTransparency = 1
	newDDLList.AnchorPoint = Vector2.new(0.5, 0.5)
	newDDLList.Size = UDim2.new(0.95, 0, 0.8, 0)
	newDDLList.Position = UDim2.new(0.5, 0, 0.5, 0)
	newDDLList.Font = Enum.Font.GothamBlack
	newDDLList.TextScaled = true
	newDDLList.TextXAlignment = Enum.TextXAlignment.Left
	newDDLList.TextColor3 = Color3.fromRGB(255, 255, 255)
	newDDLList.RichText = true
	newDDLList.Text = 'None'


	return newDDLButton
end

local function DDLlabel (ddlButton, newValue)

	if type(newValue) == 'table' then
		local newTXT = "None"

		if #newValue >=1 then 
			newTXT = ""

			for _, addItem in ipairs(newValue) do
				newTXT = string.format(newTXT .. "%s, ", addItem)
			end

		end

		ddlButton.TextLabel.Text = newTXT

	else
		local newTXT = "None" if newValue ~= "" and newValue ~= nil then newTXT = newValue end
		ddlButton.TextLabel.Text = newTXT
	end
end

local DDLColors = {
	[true] = Color3.fromRGB(0, 176, 109);
	[false] = Color3.fromRGB(138, 138, 199)
}

local function GetDDL (ddlButton, items, multiple, keyName, secondKeyName, tabName)

	local DDL = ddlButton.Parent:FindFirstChild('List')

	if not DDL then
		DDL = Instance.new('Frame', MainContent) DDL.Name = 'List' DDL.Visible = false
		DDL.BackgroundColor3 = Color3.fromRGB(75, 75, 108)
		DDL.BorderSizePixel = 0
		DDL.ZIndex = 555
		--DDL.Size = UDim2.new(0.448, 0, 0.388, 0)
		MakeUICorner(0.02, DDL)
		MakeUIPadding(0, 0.02, 0.02, 0, DDL)

		local UIStroke = Instance.new('UIStroke', DDL)
		UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Contextual
		UIStroke.Color = Color3.fromRGB(189, 189, 255)
		UIStroke.LineJoinMode = Enum.LineJoinMode.Round
		UIStroke.Thickness = 1

		local ScrollingItems = Instance.new('ScrollingFrame', DDL) ScrollingItems.Name = 'ScrollingItems'
		ScrollingItems.BackgroundTransparency = 1
		ScrollingItems.Size = UDim2.new(1, 0, 0.97, 0)
		ScrollingItems.Position = UDim2.new(0, 0, 0.03, 0)
		ScrollingItems.ZIndex = 556
		ScrollingItems.AutomaticCanvasSize = 'Y'
		ScrollingItems.CanvasSize = UDim2.new(0,0,0,0)
		ScrollingItems.ScrollBarImageColor3 = Color3.fromRGB(255,255,255)
		ScrollingItems.ScrollBarThickness = 3
		ScrollingItems.BorderSizePixel = 0
		ScrollingItems.ScrollingDirection = Enum.ScrollingDirection.Y
		makeUIList(0.03, ScrollingItems)

		local TemplateButton = Instance.new('TextButton', ScrollingItems) TemplateButton.Name = 'Template' TemplateButton.Visible = false
		TemplateButton.BackgroundColor3 = Color3.fromRGB(138, 138, 199)
		TemplateButton.BorderSizePixel = 0
		TemplateButton.Size = UDim2.new(1, 0, 0.08, 0)
		TemplateButton.ZIndex = 556
		TemplateButton.RichText = true
		TemplateButton.Font = Enum.Font.GothamBlack
		TemplateButton.TextScaled = true
		TemplateButton.TextStrokeTransparency = 0.65
		TemplateButton.TextColor3 = Color3.fromRGB(255,255,255)

		--DDL.Size = UDim2.new(1, 0, 0, DDL.AbsoluteSize.Y)
		DDL.Position = UDim2.new(0, 0, 1, 0)
		DDL.Parent = ddlButton.Parent
	end

	DDL.Size = UDim2.new(1, 0, 0, MainContent.AbsoluteSize.Y * 0.388)
	DDL.Visible = not DDL.Visible

	for _, button in ipairs(DDL.ScrollingItems:GetChildren()) do
		if button.Name == 'item' then button:Destroy() end
	end

	if not DDL.Visible then return end

	for _, item in ipairs(items) do
		local newItem = DDL.ScrollingItems.Template:Clone() newItem.Name = 'item'
		newItem.Parent = DDL.ScrollingItems
		newItem.Text = item
		newItem.Visible = true

		local itemSelected = false

		if type(GetSave(keyName)) == 'table' then

			if secondKeyName then
				itemSelected = GetSave(keyName)[tabName][secondKeyName] == item
			else
				itemSelected = table.find(GetSave(keyName), item)
			end

		else itemSelected = GetSave(keyName) == item
		end

		if itemSelected then newItem.BackgroundColor3 = DDLColors[true] end

		newItem.MouseButton1Click:Connect(function()
			local isSelected = false

			if multiple then
				local itemInTable = table.find(GetSave(keyName), item)
				local newSave = table.clone(Settings[keyName])

				if itemInTable then 
					table.remove(newSave, itemInTable)
				else
					table.insert(newSave, item)
					isSelected = true
				end

				Save(keyName, newSave)

			else

				local oldKey = GetSave(keyName)

				for _, button in ipairs(DDL.ScrollingItems:GetChildren()) do
					if button.Name ~= 'item' then continue end
					if (not secondKeyName and button.Text == oldKey) or (secondKeyName and button.Text == oldKey[tabName][secondKeyName])  then button.BackgroundColor3 = DDLColors[false] break end
				end

				local toSave = "" if secondKeyName then toSave = deepcopy(oldKey) toSave[tabName][secondKeyName] = "" end

				if not secondKeyName and oldKey ~= item then toSave = item
				elseif secondKeyName and oldKey[tabName][secondKeyName] ~= item then toSave[tabName][secondKeyName] = item
				end



				Save(keyName, toSave)
				if keyName == "Selected Macro" then getMacroUnits(toSave, MacroUnitsTextBlocks) end

				local oldKey = GetSave(keyName)


				isSelected = (secondKeyName and toSave[tabName][secondKeyName] ~= "") or ( not secondKeyName and toSave ~= "")

			end

			local fillDDL = GetSave(keyName) if secondKeyName then fillDDL = fillDDL[tabName][secondKeyName] end



			DDLlabel(ddlButton, fillDDL)

			newItem.BackgroundColor3 = DDLColors[isSelected]

		end)
	end	

end

local function MakeTextBox (subPage, PlacehodlerTXT, TitleTXT, scaleY)

	local TextBoxFrame = Instance.new('Frame', subPage)
	TextBoxFrame.BackgroundTransparency = 1
	TextBoxFrame.Size = UDim2.new(1, 0, scaleY, 0)
	TextBoxFrame.LayoutOrder = Orders[subPage]
	Orders[subPage] += 1

	local TextBoxTitle = Instance.new('TextLabel', TextBoxFrame)
	TextBoxTitle.BackgroundTransparency = 1
	TextBoxTitle.Size = UDim2.new(1, 0, 0.3, 0)
	TextBoxTitle.Position = UDim2.new(0, 0, 0.05, 0)
	TextBoxTitle.Font = Enum.Font.GothamBlack
	TextBoxTitle.TextScaled = true
	TextBoxTitle.TextColor3 = Color3.fromRGB(255,255,255)
	TextBoxTitle.TextXAlignment = Enum.TextXAlignment.Left
	TextBoxTitle.Text = TitleTXT

	local TextBoxShadow = Instance.new('Frame', TextBoxFrame)
	TextBoxShadow.BackgroundColor3 = Color3.fromRGB(75, 75, 108)
	TextBoxShadow.BorderSizePixel = 0
	TextBoxShadow.Size = UDim2.new(1, 0, 0.408, 0)
	TextBoxShadow.Position = UDim2.new(0, 0, 0.45, 0)
	MakeUICorner(0.15, TextBoxShadow)

	local TextBox = Instance.new('TextBox', TextBoxFrame)
	TextBox.BackgroundTransparency = 1
	TextBox.TextXAlignment = Enum.TextXAlignment.Left
	TextBox.Size = UDim2.new(0.985, 0, 0.408, 0)
	TextBox.Position = UDim2.new(0.015, 0, 0.45, 0)
	TextBox.Font = Enum.Font.GothamBold
	TextBox.PlaceholderColor3 = Color3.fromRGB(178, 178, 178)
	TextBox.PlaceholderText = PlacehodlerTXT
	TextBox.TextScaled = true
	TextBox.TextColor3 = Color3.fromRGB(255,255,255)
	TextBox.Text = ""

	local UIStroke = Instance.new('UIStroke', TextBoxShadow)
	UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	UIStroke.Color = Color3.fromRGB(189, 189, 255)
	UIStroke.LineJoinMode = Enum.LineJoinMode.Round
	UIStroke.Thickness = 1

	return TextBox
end

local function MakeSlider (subPage, TitleTXT, scaleY)

	local slideFrame = Instance.new('Frame', subPage)
	slideFrame.BackgroundTransparency = 1
	slideFrame.Size = UDim2.new(1, 0, scaleY, 0)
	slideFrame.LayoutOrder = Orders[subPage]
	Orders[subPage] += 1

	local slideTitle = Instance.new('TextLabel', slideFrame)
	slideTitle.BackgroundTransparency = 1
	slideTitle.Size = UDim2.new(0.532, 0, 0.3, 0)
	slideTitle.Position = UDim2.new(0, 0, 0.05, 0)
	slideTitle.Font = Enum.Font.GothamBlack
	slideTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
	slideTitle.TextScaled = true
	slideTitle.TextXAlignment = Enum.TextXAlignment.Left
	slideTitle.Text = TitleTXT

	local slideBox = Instance.new('TextBox', slideFrame)
	slideBox.BackgroundColor3 = Color3.fromRGB(75, 75, 108)
	slideBox.BorderSizePixel = 0
	slideBox.Size = UDim2.new(0.468, 0, 0.312, 0)
	slideBox.Position = UDim2.new(0.532, 0, 0.038, 0)
	slideBox.Font = Enum.Font.GothamBold
	slideBox.TextScaled = true
	slideBox.PlaceholderText = ""
	slideBox.Text = ""
	slideBox.TextColor3 = Color3.fromRGB(255,255,255)
	MakeUICorner(0.15, slideBox)

	local UIStroke = Instance.new('UIStroke', slideBox)
	UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	UIStroke.Color = Color3.fromRGB(189, 189, 255)
	UIStroke.LineJoinMode = Enum.LineJoinMode.Round
	UIStroke.Thickness = 1

	local slider = Instance.new('Frame', slideFrame) slider.Name = "slider"
	slider.BackgroundColor3 = Color3.fromRGB(27, 27, 39)
	slider.BorderSizePixel = 0
	slider.Size = UDim2.new(1, 0, 0.35, 0)
	slider.Position = UDim2.new(0, 0, 0.508, 0)
	MakeUICorner(0.2, slider)

	local UIStroke = Instance.new('UIStroke', slider)
	UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	UIStroke.Color = Color3.fromRGB(189, 189, 255)
	UIStroke.LineJoinMode = Enum.LineJoinMode.Round
	UIStroke.Thickness = 1

	local sliderBar = Instance.new('Frame', slider)
	sliderBar.BackgroundColor3 = Color3.fromRGB(255,255,255)
	sliderBar.BorderSizePixel = 0
	sliderBar.Size = UDim2.new(1,0,1,0)
	MakeUICorner(0.2, sliderBar)

	local UIGradient = Instance.new('UIGradient', sliderBar)

	UIGradient.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0, Color3.fromRGB(176, 176, 239) ),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255) ),
	}

	local sliderButton = Instance.new('TextButton', slider) sliderButton.Name = "SliderButton"
	sliderButton.BackgroundTransparency = 1
	sliderButton.ZIndex = 10
	sliderButton.Size = UDim2.new(1,0,1,0)
	sliderButton.Text = ""

	return slideFrame
end

local function MakeSliderV2 (subPage, TitleTXT, scaleY)
	local slideFrame = Instance.new('Frame', subPage)
	slideFrame.BackgroundTransparency = 1
	slideFrame.Size = UDim2.new(1, 0, scaleY, 0)
	slideFrame.LayoutOrder = Orders[subPage]
	Orders[subPage] += 1

	local slideTitle = Instance.new('TextLabel', slideFrame)
	slideTitle.BackgroundTransparency = 1
	slideTitle.AnchorPoint = Vector2.new(0, 0.5)
	slideTitle.Size = UDim2.new(0.49, 0, 0.9, 0)
	slideTitle.Position = UDim2.new(0.02, 0, 0.5, 0)
	slideTitle.Font = Enum.Font.GothamBlack
	slideTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
	slideTitle.TextScaled = true
	slideTitle.TextXAlignment = Enum.TextXAlignment.Left
	slideTitle.Text = TitleTXT
	slideTitle.TextStrokeTransparency = 0
	slideTitle.TextStrokeColor3 = Color3.fromRGB(79,81,112)
	slideTitle.ZIndex = 3

	local slideAmount = Instance.new('TextLabel', slideFrame)
	slideAmount.BackgroundTransparency = 1
	slideAmount.AnchorPoint = Vector2.new(1, 0.5)
	slideAmount.Size = UDim2.new(0.49, 0, 0.9, 0)
	slideAmount.Position = UDim2.new(0.98, 0, 0.5, 0)
	slideAmount.Font = Enum.Font.GothamBlack
	slideAmount.TextColor3 = Color3.fromRGB(255, 255, 255)
	slideAmount.TextScaled = true
	slideAmount.TextXAlignment = Enum.TextXAlignment.Right
	slideAmount.Text = "[0/0]"
	slideAmount.Name = "AmountLabel"
	slideAmount.TextStrokeTransparency = 0
	slideAmount.TextStrokeColor3 = Color3.fromRGB(79,81,112)
	slideAmount.ZIndex = 3

	local slider = Instance.new('Frame', slideFrame) slider.Name = "slider"
	slider.BackgroundColor3 = Color3.fromRGB(27, 27, 39)
	slider.BorderSizePixel = 0
	slider.Size = UDim2.new(1, 0, 1, 0)
	MakeUICorner(0.2, slider)

	local UIStroke = Instance.new('UIStroke', slider)
	UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	UIStroke.Color = Color3.fromRGB(189, 189, 255)
	UIStroke.LineJoinMode = Enum.LineJoinMode.Round
	UIStroke.Thickness = 1

	local sliderBar = Instance.new('Frame', slider)
	sliderBar.BackgroundColor3 = Color3.fromRGB(255,255,255)
	sliderBar.BorderSizePixel = 0
	sliderBar.Size = UDim2.new(1,0,1,0)
	MakeUICorner(0.2, sliderBar)

	local UIGradient = Instance.new('UIGradient', sliderBar)

	UIGradient.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0, Color3.fromRGB(176, 176, 239) ),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255) ),
	}

	local sliderButton = Instance.new('TextButton', slider) sliderButton.Name = "SliderButton"
	sliderButton.BackgroundTransparency = 1
	sliderButton.ZIndex = 10
	sliderButton.Size = UDim2.new(1,0,1,0)
	sliderButton.Text = ""

	return slideFrame
end

local function MakeTextBlock (subPage, DefaultTXT, ScaleY)

	local TxtBlockFrame = Instance.new('Frame', subPage)
	TxtBlockFrame.BackgroundColor3 = Color3.fromRGB(31, 31, 44)
	TxtBlockFrame.BorderSizePixel = 0
	TxtBlockFrame.Size = UDim2.new(1, 0, ScaleY, 0)
	TxtBlockFrame.LayoutOrder = Orders[subPage]
	Orders[subPage] += 1
	MakeUICorner(0.2, TxtBlockFrame)

	local TxtLabel = Instance.new('TextLabel', TxtBlockFrame)
	TxtLabel.BackgroundTransparency = 1
	TxtLabel.AnchorPoint = Vector2.new(0, 0.5)
	TxtLabel.Size = UDim2.new(0.98, 0, 0.9, 0)
	TxtLabel.Position = UDim2.new(0.02, 0, 0.5, 0)
	TxtLabel.Font = Enum.Font.GothamBold
	TxtLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	TxtLabel.TextScaled = true
	TxtLabel.TextXAlignment = Enum.TextXAlignment.Left
	TxtLabel.Text = DefaultTXT

	return TxtLabel
end

local function MakeDoubleButton (subPage, ButtonTXT, ScaleY)

	local DoubleButtonFrame = Instance.new('Frame', subPage)
	DoubleButtonFrame.BackgroundTransparency = 1
	DoubleButtonFrame.BorderSizePixel = 0
	DoubleButtonFrame.Size = UDim2.new(1, 0, ScaleY, 0)
	DoubleButtonFrame.LayoutOrder = Orders[subPage] Orders[subPage] +=1

	local BiggerButton = Instance.new('TextButton', DoubleButtonFrame) BiggerButton.Name = "_bigbutton"
	BiggerButton.BackgroundColor3 = Color3.fromRGB(75,75, 108)
	BiggerButton.Size = UDim2.new(0.69, 0, 1, 0)
	BiggerButton.Text = ""
	MakeUICorner(0.15, BiggerButton)

	local UIStroke = Instance.new('UIStroke', BiggerButton)
	UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	UIStroke.Color = Color3.fromRGB(189,189,255)
	UIStroke.LineJoinMode = Enum.LineJoinMode.Round
	UIStroke.Thickness = 1

	local BiggetButtonTXT = Instance.new('TextLabel', BiggerButton)
	BiggetButtonTXT.BackgroundTransparency = 1
	BiggetButtonTXT.AnchorPoint = Vector2.new(0, 0.5)
	BiggetButtonTXT.Position = UDim2.new(0,0,0.5,0)
	BiggetButtonTXT.Size = UDim2.new(1,0, 0.8, 0)
	BiggetButtonTXT.Font = Enum.Font.GothamBlack
	BiggetButtonTXT.TextColor3 = Color3.fromRGB(255,255,255)
	BiggetButtonTXT.TextScaled = true
	BiggetButtonTXT.Text = ButtonTXT

	local ResetButton = Instance.new('TextButton', DoubleButtonFrame) ResetButton.Name = '_resetbutton'
	ResetButton.AnchorPoint = Vector2.new(1, 0)
	ResetButton.BackgroundColor3 = Color3.fromRGB(75,75,108)
	ResetButton.Size = UDim2.new(0.279, 0, 1, 0)
	ResetButton.Position = UDim2.new(1,0,0,0)

	local UIStroke = Instance.new('UIStroke', ResetButton)
	UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	UIStroke.Color = Color3.fromRGB(189,189,255)
	UIStroke.LineJoinMode = Enum.LineJoinMode.Round
	UIStroke.Thickness = 1

	local ResetButtonTXT = Instance.new('TextLabel', ResetButton)
	ResetButtonTXT.BackgroundTransparency = 1
	ResetButtonTXT.AnchorPoint = Vector2.new(0, 0.5)
	ResetButtonTXT.Position = UDim2.new(0,0,0.5,0)
	ResetButtonTXT.Size = UDim2.new(1,0, 0.8, 0)
	ResetButtonTXT.Font = Enum.Font.GothamBlack
	ResetButtonTXT.TextColor3 = Color3.fromRGB(255,255,255)
	ResetButtonTXT.TextScaled = true
	ResetButtonTXT.Text = "RESET"


	return DoubleButtonFrame
end

MakeNewPage('Main', 0.117)
MakeNewPage('Farm', 0.117)
MakeNewPage('AutoPlay+', 0.225)
MakeNewPage('Macro', 0.14)
MakeNewPage('Misc', 0.1)

-----------------------
pageShown = ScrollingContent['Main']
pageShown.Visible = true
Pages['Main'].BottomLine.Visible = true
------------------------------------------

local Main_MainSubPage = MakeNewSubPage('Main', 'Right', 0.603, 0.03, 0.01, 0.02)
MakeTitle(Main_MainSubPage, 'Main', 0.07)
local TPToLobby = MakeLargeButton(Main_MainSubPage, 'Teleport To Lobby', 0.103)

local OtherFeatures_MiscSubPage = MakeNewSubPage('Misc', 'Right', 0.344, 0.03, 0.02, 0.02)
MakeTitle(OtherFeatures_MiscSubPage, 'Other Features', 0.13)
local fpsBoost = MakeCheckbox(OtherFeatures_MiscSubPage, 'Fps Boost', 0.095)
local blackScreen = MakeCheckbox(OtherFeatures_MiscSubPage, 'Black Screen', 0.095)
local autoHideUIOnExecute = MakeCheckbox(OtherFeatures_MiscSubPage, 'Auto Hide UI on Execute', 0.095)

local Misc_MiscSubPage = MakeNewSubPage('Misc', 'Right', 0.344, 0.03, 0.02, 0.02)
MakeTitle(Misc_MiscSubPage, 'Misc', 0.13)
makeUHBigger = MakeCheckbox(Misc_MiscSubPage, 'Large Window', 0.095)
local hideAdditionalFrame = MakeCheckbox(Misc_MiscSubPage, "Hide Additional Frame", 0.095)
------------------------------------------------------

---------------------------------------------------------------------

local Macro_ConfigSubPage = MakeNewSubPage('Macro', 'Left', 0.405, 0.03, 0.02, 0.01)
MakeTitle(Macro_ConfigSubPage, 'Config', 0.105)
local selectedMacroDDL = MakeDDL(Macro_ConfigSubPage, "Select Macro", 0.26)
local createMacroBox = MakeTextBox(Macro_ConfigSubPage, 'Macro Name', 'Create Macro', 0.26)
local deleteMacroButton = MakeLargeButton(Macro_ConfigSubPage, 'Delete Macro', 0.155)
local equipMacroUnitsButton = MakeLargeButton(Macro_ConfigSubPage, 'Equip Macro Units', 0.155)

-----------------------

Macro_MacroUnitsSubPage = MakeNewSubPage('Macro', 'Left', 0.361, 0.03, 0.02, 0.04)
MakeTitle(Macro_MacroUnitsSubPage, 'Macro Units', 0.115)
for unitOrder =1,6 do local macroUnitBlock = MakeTextBlock(Macro_MacroUnitsSubPage, string.format('Unit %s:', unitOrder), 0.1) MacroUnitsTextBlocks[unitOrder] = macroUnitBlock end
if not IsLobby then Macro_MacroUnitsSubPage.Visible = false end

-----------------------

local Macro_MacroSubPage = MakeNewSubPage('Macro', 'Left', 0.258, 0.06, 0.02, 0.05)
MakeTitle(Macro_MacroSubPage, 'Macro', 0.16)
local PlayMacro = MakeCheckbox(Macro_MacroSubPage, "Play Macro", 0.13)
local RecordMacro = MakeCheckbox(Macro_MacroSubPage, "Record Macro", 0.13)
local StepDelaySlider = MakeSlider(Macro_MacroSubPage, "Step Delay", 0.41)

-----------------------

local Macro_MacroStatusSubPage = MakeNewSubPage('Macro', 'Left', 0.258, 0.06, 0.02, 0.05)
local MacroStatusTitle = MakeTitle(Macro_MacroStatusSubPage, 'Macro Status: None', 0.16)
local Macro_ActionTXT = MakeTextBlock(Macro_MacroStatusSubPage, 'Action:', 0.14)
local Macro_TypeTXT = MakeTextBlock(Macro_MacroStatusSubPage, 'Type:', 0.14)
local Macro_UnitTXT = MakeTextBlock(Macro_MacroStatusSubPage, 'Unit:', 0.14)
local Macro_WaitTXT = MakeTextBlock(Macro_MacroStatusSubPage, 'Waiting for:', 0.14)


-----------------------

local Macro_MacroListSubPage = MakeNewSubPage('Macro', 'Right', 4.542, 0.03, 0, 0.002)

----------------------------

local HideUHFrame = Instance.new('Frame', Misc_MiscSubPage)
HideUHFrame.BackgroundTransparency = 1
HideUHFrame.LayoutOrder = Orders[Misc_MiscSubPage]
HideUHFrame.Size = UDim2.new(1, 0, 0.144, 0)
Orders[Misc_MiscSubPage] += 1

FPSMax_Misc = MakeTextBox(Misc_MiscSubPage, 'Frames Per Second', 'FPS Limit', 0.31)

local HideUHLabel = Instance.new('TextLabel', HideUHFrame)
HideUHLabel.TextColor3 = Color3.fromRGB(255,255,255)
HideUHLabel.BackgroundTransparency = 1
HideUHLabel.Size = UDim2.new(0.796, 0, 0.8, 0)
HideUHLabel.Font = Enum.Font.GothamBold
HideUHLabel.TextScaled = true
HideUHLabel.Text = 'Hide Skele Hub'
HideUHLabel.Position = UDim2.new(0, 0, 0.5, 0)
HideUHLabel.AnchorPoint = Vector2.new(0, 0.5)
HideUHLabel.TextXAlignment = Enum.TextXAlignment.Left

local HideUHButton = Instance.new('TextButton', HideUHFrame)
HideUHButton.BackgroundColor3 = Color3.fromRGB(75, 75, 108)
HideUHButton.TextColor3 = Color3.fromRGB(255,255,255)
HideUHButton.BorderSizePixel = 0
HideUHButton.AnchorPoint = Vector2.new(0, 0.5)
HideUHButton.Size = UDim2.new(0.2, 0, 0.8, 0)
HideUHButton.Position = UDim2.new(0.8, 0, 0.5, 0)
HideUHButton.Font = Enum.Font.GothamBlack
HideUHButton.TextScaled = true
HideUHButton.Text = 'U'
MakeUICorner(0.15, HideUHButton)

local HideUHStroke = Instance.new('UIStroke', HideUHButton)
HideUHStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
HideUHStroke.Color = Color3.fromRGB(189, 189, 255)
HideUHStroke.LineJoinMode = Enum.LineJoinMode.Round
HideUHStroke.Thickness = 1

local chosing = false
HideUHButton.MouseButton1Click:Connect(function()
	if chosing then return end
	chosing = true
	HideUHButton.Text = "..."


	local chosenButton
	chosenButton = UIS.InputBegan:Connect(function(input)
		if input.UserInputType ~= Enum.UserInputType.Keyboard then return end
		chosenButton:Disconnect()
		chosing = false
		Save('Hide Key', input.KeyCode.Name)

		HideUHButton.Text = input.KeyCode.Name

	end)


end)
HideUHButton.Text = UIS:GetStringForKeyCode( GetSave('Hide Key') )

UIS.InputBegan:Connect(function(input, gameprocess)
	if input.KeyCode.Name ~= GetSave('Hide Key') or gameprocess then return end 
	MainFrame.Visible = not MainFrame.Visible
end)

local MacroTabs = Instance.new('Frame', Macro_MacroListSubPage)
MacroTabs.BackgroundTransparency = 1
MacroTabs.LayoutOrder = -999
MacroTabs.Size = UDim2.new(1, 0, 0.0092, 0)
MacroTabs.Name = 'Macro Tabs'

local MacroTabsListLayout = Instance.new('UIListLayout', MacroTabs)
MacroTabsListLayout.Padding = UDim.new(0,0)
MacroTabsListLayout.SortOrder = Enum.SortOrder.LayoutOrder
MacroTabsListLayout.FillDirection = Enum.FillDirection.Horizontal
MacroTabsListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
MacroTabsListLayout.VerticalAlignment = Enum.VerticalAlignment.Center

local RightOrders = {Main = 1, Tower = 2, Raid = 3, Portal = 4, Other = 5}
local viewingTab = nil
for tabName, mapsList in pairs(macroMapList) do

	local MacroList = Instance.new('Frame', Macro_MacroListSubPage)
	MacroList.BackgroundTransparency = 1
	MacroList.Size = UDim2.new(1, 0, 0.984, 0)
	MacroList.Name = tabName
	MacroList.Visible = false
	makeUIList(0, MacroList)

	Orders[MacroList] = 0

	local newTab = Instance.new('TextButton', MacroTabs)
	newTab.BackgroundTransparency = 1
	newTab.BackgroundColor3 = Color3.fromRGB(255,255,255)
	newTab.BorderSizePixel = 0
	newTab.Size = UDim2.new(0.206, 0, 1, 0)
	newTab.Text = ""
	newTab.Name = tabName
	newTab.LayoutOrder = RightOrders[tabName]
	newTab.ZIndex = 5

	newTab.MouseEnter:Connect(function()
		local TweenButton = TS:Create(newTab, newPageButtonBCInfo, {BackgroundTransparency = 0.9})
		TweenButton:Play()
	end)

	newTab.MouseLeave:Connect(function()
		local TweenButton = TS:Create(newTab, newPageButtonBCInfo, {BackgroundTransparency = 1})
		TweenButton:Play()
	end)

	newTab.MouseButton1Click:Connect(function()
		if viewingTab == newTab then return end

		Macro_MacroListSubPage[viewingTab.Name].Visible = false
		MacroList.Visible = true

		viewingTab.bottomLine.Visible = false
		newTab.bottomLine.Visible = true

		viewingTab = newTab

	end)

	local bottomLine = Instance.new('Frame', newTab) bottomLine.Name = 'bottomLine'
	bottomLine.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	bottomLine.BorderSizePixel = 0
	bottomLine.Size = UDim2.new(1, 0, 0.05, 0)
	bottomLine.AnchorPoint = Vector2.new(0, 1)
	bottomLine.Position = UDim2.new(0, 0, 1, 0)
	bottomLine.Visible = false

	local tabTxtLabel = Instance.new('TextLabel', newTab)
	tabTxtLabel.BackgroundTransparency = 1
	tabTxtLabel.AnchorPoint = Vector2.new(0.5, 0.5)
	tabTxtLabel.Size = UDim2.new(1, 0, 0.8, 0)
	tabTxtLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
	tabTxtLabel.Font = Enum.Font.GothamBlack
	tabTxtLabel.TextScaled = true
	tabTxtLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	tabTxtLabel.Text = tabName

	for _, mapName in ipairs(mapsList) do

		local newDDLMacroMap = MakeDDL(MacroList, mapName, 0.023)

		newDDLMacroMap.MouseButton1Click:Connect(function()

			local MacrosList = listfiles('Skele Hub\\Anime Vanguards\\Macro')

			local items = {}

			for _, macro in ipairs(MacrosList) do
				local macroName = string.match(string.sub(macro, 32), "[^.]+")

				table.insert(items, macroName)

			end

			GetDDL(newDDLMacroMap, items, false, 'Selected Macro Map', mapName, tabName)

		end)

		local fillDDL = GetSave('Selected Macro Map')

		DDLlabel(newDDLMacroMap, fillDDL[tabName][mapName])


	end

end

viewingTab = Macro_MacroListSubPage['Macro Tabs']['Main']
viewingTab.bottomLine.Visible = true
Macro_MacroListSubPage['Main'].Visible = true

local TypesAndMeaning = {
	['cycle_priority'] = "Changing Priority",
	['spawn_unit'] = "Spawning Unit",
	['sell_unit_ingame'] = "Selling Unit",
	['upgrade_unit_ingame'] = "Upgrading Unit"
}
local LastMacroStartedAt = nil

StepDelaySlider.slider.SliderButton.MouseButton1Down:Connect(function()
	sliderFunc(StepDelaySlider, "Step Delay", 0, 1, 0.01, 'seconds')

end)

selectedMacroDDL.MouseButton1Click:Connect(function()
	local MacrosList = listfiles('Skele Hub\\Anime Vanguards\\Macro')

	local items = {}

	for _, macro in ipairs(MacrosList) do
		local macroName = string.match(string.sub(macro, 32), "[^.]+")

		table.insert(items, macroName)

	end

	GetDDL(selectedMacroDDL, items, false, 'Selected Macro')
end)

DDLlabel(selectedMacroDDL, GetSave('Selected Macro'))
if IsLobby then getMacroUnits(GetSave('Selected Macro'), MacroUnitsTextBlocks) end


createMacroBox.FocusLost:Connect(function(enterPressed)
	if not enterPressed and createMacroBox.Text ~= '' then return end

	writefile('Skele Hub\\Anime Vanguards\\Macro\\' .. createMacroBox.Text .. '.json', HttpService:JSONEncode({}))
end)

deleteMacroButton.MouseButton1Click:Connect(function()

	local item = selectedMacroDDL.TextLabel.Text
	if item == "" or item == "None" then return end

	local macroExist = isfile('Skele Hub\\Anime Vanguards\\Macro\\' .. item)
	local macroExistjson = isfile('Skele Hub\\Anime Vanguards\\Macro\\' .. item .. '.json')
	if macroExistjson then item = item .. '.json' end

	if not macroExist and not macroExistjson then return end

	delfile('Skele Hub\\Anime Vanguards\\Macro\\' .. item)

	Save("Selected Macro", "")
	DDLlabel(selectedMacroDDL, GetSave('Selected Macro'))

end)

makeUHBigger.MouseButton1Click:Connect(function()

	local enabled = not GetSave(makeUHBigger.Name)
	Save(makeUHBigger.Name, enabled)

	makeUHBigger.Parent.BackgroundColor3 = checkBoxColors[enabled]

	if enabled then
		TS:Create(MainFrame, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { Size =  UDim2.new(1,0,1,0) }):Play()
		TS:Create(additionalFrame, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { Size =  UDim2.new(0.390, 0, 0.124, 0) }):Play()

	else
		TS:Create(MainFrame, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { Size =  UDim2.new(0.525, 0, 0.525, 0) }):Play()
		TS:Create(additionalFrame, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { Size =  UDim2.new(0.195, 0, 0.062, 0) }):Play()
	end

end)

if GetSave(makeUHBigger.Name) then MainFrame.Size = UDim2.new(1,0,1,0) MainFrame.Position = UDim2.new(0.614, 0, 0, 0) additionalFrame.Size = UDim2.new(0.390, 0, 0.124, 0) makeUHBigger.Parent.BackgroundColor3 = checkBoxColors[true] end

local blackScreenGui = Instance.new('ScreenGui', game.CoreGui)
blackScreenGui.IgnoreGuiInset = true
local function blackScreenFunc(value)
	if value then
		local bc = Instance.new('Frame', blackScreenGui)
		bc.BackgroundColor3 = Color3.fromRGB(24, 24, 24)
		bc.Size = UDim2.fromScale(1, 1)
		bc.Name = 'BlackScreenFrame'
		
		local uiGrad = Instance.new('UIGradient', bc)
		uiGrad.Rotation = 90
		uiGrad.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)), ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))})
		
		local skeleHubText = Instance.new('TextLabel', bc)
		skeleHubText.Text = 'Skele Hub'
		skeleHubText.AnchorPoint = Vector2.new(0.5, 0.5)
		skeleHubText.BackgroundTransparency = 1
		skeleHubText.Size = UDim2.fromScale(0.149, 0.081)
		skeleHubText.Position = UDim2.fromScale(0.5, 0.163)
		skeleHubText.Font = Enum.Font.FredokaOne
		skeleHubText.TextScaled = true
		skeleHubText.TextStrokeTransparency = 0
		skeleHubText.TextColor3 = Color3.fromRGB(255, 255, 255)
		
		local PlayerNameText = Instance.new('TextLabel', bc)
		PlayerNameText.Text = player.Name
		PlayerNameText.AnchorPoint = Vector2.new(0.5, 0.5)
		PlayerNameText.BackgroundTransparency = 1
		PlayerNameText.Size = UDim2.fromScale(0.082, 0.048)
		PlayerNameText.Position = UDim2.fromScale(0.5, 0.226)
		PlayerNameText.Font = Enum.Font.FredokaOne
		PlayerNameText.TextScaled = true
		PlayerNameText.TextStrokeTransparency = 0
		PlayerNameText.TextColor3 = Color3.fromRGB(255, 255, 255)
		
		local ExecutorText = Instance.new('TextLabel', bc)
		ExecutorText.Text = 'Executor: ' .. executor
		ExecutorText.AnchorPoint = Vector2.new(0.5, 0.5)
		ExecutorText.BackgroundTransparency = 1
		ExecutorText.Size = UDim2.fromScale(0.106, 0.062)
		ExecutorText.Position = UDim2.fromScale(0.08, 0.95)
		ExecutorText.Font = Enum.Font.FredokaOne
		ExecutorText.TextScaled = true
		ExecutorText.TextStrokeTransparency = 0
		ExecutorText.TextColor3 = Color3.fromRGB(255, 255, 255)
		
		local DiscordInv = Instance.new('TextLabel', bc)
		DiscordInv.Text = 'discord.gg/CVX9a8GgTK'
		DiscordInv.AnchorPoint = Vector2.new(0.5, 0.5)
		DiscordInv.BackgroundTransparency = 1
		DiscordInv.Size = UDim2.fromScale(0.143, 0.037)
		DiscordInv.Position = UDim2.fromScale(0.5, 0.959)
		DiscordInv.Font = Enum.Font.FredokaOne
		DiscordInv.TextScaled = true
		DiscordInv.TextStrokeTransparency = 0
		DiscordInv.TextColor3 = Color3.fromRGB(68, 68, 68)
	else
		if blackScreenGui:FindFirstChild('BlackScreenFrame') then
			blackScreenGui.BlackScreenFrame:Destroy()
		end
	end
end



local function Rend3dOffFunc (enabled)
	blackScreenFunc(enabled)

	if enabled then
		RunS:Set3dRenderingEnabled(false)
	else
		RunS:Set3dRenderingEnabled(true)
	end
end

blackScreen.MouseButton1Click:Connect(function()

	local enabled = not GetSave(blackScreen.Name)
	Save(blackScreen.Name, enabled)

	blackScreen.Parent.BackgroundColor3 = checkBoxColors[enabled]

	Rend3dOffFunc(enabled)

end)

if GetSave('Black Screen') then Rend3dOffFunc(true) RenderingOff.Parent.BackgroundColor3 = checkBoxColors[true] end

local function fpsBoostFunc()
	loadstring(game:HttpGet("https://raw.githubusercontent.com/menshaha/Main/main/fpsboost"))()
end

fpsBoost.MouseButton1Click:Connect(function()
	local enabled = not GetSave(fpsBoost.Name)
	Save(fpsBoost.Name, enabled)

	fpsBoost.Parent.BackgroundColor3 = checkBoxColors[enabled]

	fpsBoostFunc()
end)

if GetSave(fpsBoost.Name) then
	wait(1)
	fpsBoostFunc()
	fpsBoost.Parent.BackgroundColor3 = checkBoxColors[true]
end

function getMacroUnits(macroName, textBlocks)
	local nameMacro = macroName
	local unitsFromMacro = {}

	local macroExist = isfile('Skele Hub\\Anime Vanguards\\' .. nameMacro)
	local macroExistjson = isfile('Skele Hub\\Anime Vanguards\\' .. nameMacro .. '.json')
	if macroExistjson then nameMacro = nameMacro .. '.json' end


	if macroExist or macroExistjson then

		local sucess, response = pcall(function()
			local MacroAbout = HttpService:JSONDecode( readfile( 'Skele Hub\\Anime Vanguards\\' .. nameMacro) )

			for _, macroTabl in pairs(MacroAbout) do
				if not macroTabl['type'] or macroTabl['type'] ~= 'spawn_unit' then continue end
				if table.find(unitsFromMacro, macroTabl.unit) then continue end

				table.insert(unitsFromMacro, macroTabl.unit)
			end
		end)

		if not sucess then
			for i=1,6 do
				unitsFromMacro[i] = "error"
			end
		end

	end

	for textBlockNumb, TextBlock in ipairs(textBlocks) do
		local unitName = unitsFromMacro[textBlockNumb] if oldItemsData[unitsFromMacro[textBlockNumb]] then unitName = oldItemsData[unitsFromMacro[textBlockNumb]].Name end

		TextBlock.Text = string.format('Unit %s: %s', textBlockNumb, unitName or "")
	end

end 

autoHideUIOnExecute.MouseButton1Click:Connect(function()
	local enabled = not GetSave(autoHideUIOnExecute.Name)
	Save(autoHideUIOnExecute.Name, enabled)

	autoHideUIOnExecute.Parent.BackgroundColor3 = checkBoxColors[enabled]
end)

hideAdditionalFrame.MouseButton1Click:Connect(function()
	local enabled = not GetSave(hideAdditionalFrame.Name)
	Save(hideAdditionalFrame.Name, enabled)

	hideAdditionalFrame.Parent.BackgroundColor3 = checkBoxColors[enabled]

	additionalFrame.Visible = not enabled
end)
if GetSave(hideAdditionalFrame.Name) then additionalFrame.Visible = false hideAdditionalFrame.Parent.BackgroundColor3 = checkBoxColors[true] end

FPSMax_Misc.FocusLost:Connect(function()
	if FPSMax_Misc.Text == '' or not tonumber(FPSMax_Misc.Text) or tonumber(FPSMax_Misc.Text) < 1 then FPSMax_Misc.Text = GetSave('FPS_LIMIT') return end
	pcall(function() 

		if setfpsmax then
			setfpsmax( tonumber(FPSMax_Misc.Text) ) 
		else

			local maxFPS = math.clamp(tonumber(FPSMax_Misc.Text), 0, 60)
			local notChangedfps

			notChangedfps = FPSMax_Misc.FocusLost:Connect(function()
				if FPSMax_Misc.Text == '' or not tonumber(FPSMax_Misc.Text) or tonumber(FPSMax_Misc.Text) < 1 then return end
				notChangedfps:Disconnect()
				notChangedfps = nil
			end)

			while notChangedfps do
				local t0 = tick()
				RunS.Heartbeat:Wait()
				repeat until (t0 + 1/maxFPS) < tick()
			end
		end

	end)
	Save("FPS_LIMIT", tonumber(FPSMax_Misc.Text) )
end)
FPSMax_Misc.Text = GetSave("FPS_LIMIT")
pcall(function() setfpsmax( GetSave("FPS_LIMIT") ) end)

local function MoveSlider(slider, min, max, step, abbr)

	local xOffset = math.floor((mouse.X - slider.AbsolutePosition.X) + 0.5) 
	local xOffsetClamped = math.clamp(xOffset, 0, slider.AbsoluteSize.X )

	local roundedAbsSize = math.floor(slider.AbsoluteSize.X + 0.5) 
	local RoundedOffsetClamped = math.floor(xOffsetClamped + 0.5)

	local sliderValue =  RoundedOffsetClamped / roundedAbsSize
	local newValue = sliderValue * max

	local resultValue = math.clamp( newValue - newValue % step, min, max)
	local intervalValue = math.clamp( newValue, min, max)
	if intervalValue-resultValue >= step/2 and resultValue >0 then resultValue += step end

	if resultValue <1 then resultValue = math.floor( ((resultValue*100)+0.5) )/100 else resultValue = math.floor(resultValue) end



	slider.Frame.Size = UDim2.new(math.clamp(resultValue/max, 0, 1), 0, 1, 0)

	if not slider.Parent:FindFirstChild('TextBox') then 
		slider.Parent.AmountLabel.Text = string.format("[%s/%s]", resultValue, max)
	else
		slider.Parent.TextBox.Text = string.format("%s %s", resultValue, abbr)
	end


	return resultValue

end

local function SliderBoxFunc (sliderFrame, keyName, abbr, max)
	local newStepDelay = tonumber(sliderFrame.TextBox.Text)
	if not newStepDelay or newStepDelay <=0 then return end 
	sliderFrame.TextBox.Text = sliderFrame.TextBox.Text .. ' ' .. abbr

	Save(keyName, newStepDelay)

	sliderFrame.slider.Frame.Size = UDim2.new(math.clamp(newStepDelay /max, 0, 1), 0, 1, 0)
end

local function sliderFunc (slideFrame, keyName, min, max, step, abbr)
	local connections = {}

	local resultValue = 0

	connections[1] = mouse.Move:Connect(function()
		resultValue = MoveSlider(slideFrame.slider, min, max, step, abbr)
	end)

	connections[2] = mouse.Button1Up:Connect(function()
		for _,connection in ipairs(connections) do if connection then connection:Disconnect() end end

		if not tonumber(abbr) then
			Save(keyName, resultValue)
		else
			local oldSave = GetSave(keyName)
			oldSave[tostring(abbr)] = resultValue

			Save(keyName, oldSave)
		end
	end)

	connections[3] = slideFrame.slider.SliderButton.MouseButton1Up:Connect(function()
		for _,connection in ipairs(connections) do if connection then connection:Disconnect() end end

		if not tonumber(abbr) then
			Save(keyName, resultValue)
		else
			local oldSave = GetSave(keyName)
			oldSave[tostring(abbr)] = resultValue

			Save(keyName, oldSave)
		end
	end)
end

StepDelaySlider.TextBox.FocusLost:Connect(function()
	SliderBoxFunc(StepDelaySlider, "Step Delay", 'seconds', 1)
end)
StepDelaySlider.TextBox.Text = string.format("%s seconds", GetSave("Step Delay"))
StepDelaySlider.slider.Frame.Size = UDim2.new(math.clamp(GetSave("Step Delay"), 0, 1), 0, 1, 0)

StepDelaySlider.slider.SliderButton.MouseButton1Down:Connect(function()
	sliderFunc(StepDelaySlider, "Step Delay", 0, 1, 0.01, 'seconds')

end)

createNotify('Skele Hub Executed', 5)